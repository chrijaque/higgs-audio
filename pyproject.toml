[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "higgs-audio"
version = "0.1.0"
description = "Higgs Audio V2 - A powerful audio foundation model for expressive audio generation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Boson AI", email = "info@boson.ai"}
]
maintainers = [
    {name = "Boson AI", email = "info@boson.ai"}
]
keywords = ["audio", "tts", "text-to-speech", "voice-cloning", "multimodal", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.45.1,<4.47.0",
    "librosa>=0.10.0",
    "torchaudio>=2.0.0",
    "torchvision>=0.15.0",
    "accelerate>=0.26.0",
    "descript-audio-codec",
    "dacite",
    "boto3==1.35.36",
    "s3fs",
    "json_repair",
    "pandas",
    "pydantic",
    "vector_quantize_pytorch",
    "loguru",
    "pydub",
    "omegaconf",
    "click",
    "langid",
    "jieba",
    "tqdm",
    "soundfile",
    "numpy",
    "scipy",
]

[project.optional-dependencies]
dev = [
    "ruff==0.12.2",
    "pytest",
    "pytest-cov",
    "black",
    "mypy",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser",
]

[project.urls]
Homepage = "https://github.com/boson-ai/higgs-audio"
Documentation = "https://github.com/boson-ai/higgs-audio"
Repository = "https://github.com/boson-ai/higgs-audio"
Issues = "https://github.com/boson-ai/higgs-audio/issues"

[project.scripts]
higgs-vc = "higgs_audio.cli.vc:main"
higgs-tts = "higgs_audio.cli.tts:main"
higgs-extract = "higgs_audio.cli.vc:main"
higgs-generate = "higgs_audio.cli.tts:main"

[tool.setuptools.packages.find]
include = ["higgs_audio*", "boson_multimodal*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yaml", "*.yml"]

[tool.ruff]
line-length = 119
target-version = "py310"
indent-width = 4
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "external",
    "third_party",
]

[tool.ruff.lint]
preview = true
ignore-init-module-imports = true
extend-select = [
    "B009", # static getattr
    "B010", # static setattr
    "CPY", # Copyright
    "E", # PEP8 errors
    "F", # PEP8 formatting
    "I", # Import sorting
    "TID251", # Banned API
    "UP", # Pyupgrade
    "W", # PEP8 warnings
]
ignore = [
    "E501", # Line length (handled by ruff-format)
    "E741", # Ambiguous variable name
    "W605", # Invalid escape sequence
    "UP007", # X | Y type annotations
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Ignore seemingly unused imports (they're meant for re-export)
]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["higgs_audio", "boson_multimodal"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"os.getenv".msg = "Use os.environ instead"
"os.putenv".msg = "Use os.environ instead"
"os.unsetenv".msg = "Use os.environ instead"

